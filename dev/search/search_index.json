{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the documentation of KitchenOwl.  If you want to contribute or set up a self-hosted instance of KitchenOwl you're at the right place.  Otherwise, you can find general information and features on the main website.</p> <ul> <li> <p> Getting Started</p> <p>Looking to set up your own a KitchenOwl instance?</p> <p> Self hosting guide</p> </li> <li> <p> FAQ</p> <p>Get answers to frequently asked questions.</p> <p> Read more</p> </li> <li> <p> Reference</p> <p>Learn more about the API and how to manage your instance</p> <p> Read more</p> </li> <li> <p> AGPL-3.0 License</p> <p>KitchenOwl is Free Software: You can use, study share and improve it at your will.</p> <p> Read the License</p> </li> </ul>"},{"location":"#future-features","title":"Future Features","text":"<p>For a list of planned features check out the Project Board.</p>"},{"location":"#found-an-issue","title":"Found an issue?","text":"<p>KitchenOwl is actively maintained.</p> <p>There are multiple ways in which you can improve KitchenOwl to help you and others who might encounter the same issues in the future.</p> <ul> <li> <p> Something is not working?</p> <p>Report a bug by creating an issue with information on how to reproduce it</p> <p> Report a bug</p> </li> <li> <p> Missing information in our docs?</p> <p>Report missing information or potential inconsistencies in our documentation</p> <p> Report a docs issue</p> </li> <li> <p> Want to submit an idea?</p> <p>Propose a change, feature request, or suggest an improvement</p> <p> Request a change</p> </li> <li> <p> Want to create a pull request?</p> <p>Open an issue first and then create a comprehensive and useful pull request</p> <p> Set up your development environment  Create a pull request</p> </li> </ul> <p>Hint</p> <p>Before submitting an issue, make sure to:</p> <ul> <li>Check that no similar issue already exists here</li> <li>You provided all information needed to understand the issue</li> </ul>"},{"location":"Tips-%26-Tricks/","title":"Quick Tips","text":"<p>There are a few hidden features in the app which might not be obvious at first.</p>"},{"location":"Tips-%26-Tricks/#item-description","title":"Item description","text":"<p>When searching for an item you can add the <code>,</code> delimiter to add descriptions directly. Did you also know that pressing enter when searching adds the first item to your shopping list?</p>"},{"location":"Tips-%26-Tricks/#recipe-description","title":"Recipe description","text":"<p>Recipes support markdown, additionally you can reference ingredients using <code>@ingredient_name</code> and the required amount is automatically added to the text.</p>"},{"location":"Tips-%26-Tricks/#more-details","title":"More details","text":"<p>Every card supports long presses to show details. So next time you look at your planned meals just long press and see how to cook it!</p> <p></p>"},{"location":"Tips-%26-Tricks/#share-to-the-app","title":"Share to the App","text":"<p>You can share recipe links to the KitchenOwl mobile app to directly add it to your recipe list.</p>"},{"location":"Tips-%26-Tricks/markdown/","title":"Markdown","text":""},{"location":"Tips-%26-Tricks/markdown/#ingredient-pill","title":"Ingredient pill","text":"<p>Ingredient pills allow you to reference ingredients from inside your recipes' description and automatically add amounts to it. It's case-insensitive and uses underscores for spaces. <pre><code>@ingredient_name\n</code></pre></p> <p>You can also override the item description for that occurrence by using curly braces: <pre><code>@ingredient_name{Override description. For example: 300g}\n</code></pre></p>"},{"location":"Tips-%26-Tricks/markdown/#text-formatting","title":"Text formatting","text":"<p><pre><code>**Bold text**\n</code></pre> <pre><code>_Italic text_\n</code></pre></p> <pre><code>&gt; quoted text is put inside a different colored rectangle \n</code></pre> <pre><code># Heading level 1\n## Heading level 2\n### Heading level 3\n#### Heading level 4\n</code></pre>"},{"location":"Tips-%26-Tricks/markdown/#lists","title":"Lists","text":"<p><pre><code>Bulleted list\n- aaa\n- bbb\n- ccc\n</code></pre> <pre><code>Numbered list\n1. bla bla\n2. bla bla\n3. bla bla\n</code></pre> <pre><code>Checklist\n- [ ] task\n- [ ] task\n</code></pre></p>"},{"location":"Tips-%26-Tricks/markdown/#tables","title":"Tables","text":"<pre><code>Table\n| Column_1 | Column_2 | .... | Column_n |\n| -------- | -------- | ---- | -------- |\n| Row_1    | text     | ...  | here     |\n| Row_2    | text     | ...  | here     |\n| ...      | ...      | ...  | ...      |\n| Row_n    | text     | ...  | here     |\n</code></pre>"},{"location":"reference/API/","title":"API","text":""},{"location":"reference/API/#kitchenowl-v118","title":"KitchenOwl v118","text":"<p>WIP KitchenOwl API documentation</p> Terms of service: https://kitchenowl.org/privacy/ Contact: API Support support@kitchenowl.org License: AGPL 3.0"},{"location":"reference/API/#servers","title":"Servers","text":"Description URL Official KitchenOwl server instance https://app.kitchenowl.org/api"},{"location":"reference/API/#endpoints","title":"Endpoints","text":""},{"location":"reference/API/#delete-apiauth","title":"DELETE /api/auth","text":"<p>User logout</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <code>id</code> path integer No Token ID to revoke (default: current token) <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"msg\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"msg\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}\n</code></pre> <p> Response 401 Unauthorized </p>"},{"location":"reference/API/#post-apiauth","title":"POST /api/auth","text":"<p>User login</p> <p>Request body</p> application/json <p><pre><code>{\n    \"device\": \"string\",\n    \"password\": \"string\",\n    \"username\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"additionalProperties\": false,\n    \"properties\": {\n        \"device\": {\n            \"type\": \"string\",\n            \"writeOnly\": true\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"writeOnly\": true\n        },\n        \"username\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"password\",\n        \"username\"\n    ],\n    \"type\": \"object\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"access_token\": \"string\",\n    \"refresh_token\": \"string\",\n    \"user\": {}\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\"\n        },\n        \"refresh_token\": {\n            \"type\": \"string\"\n        },\n        \"user\": {\n            \"type\": \"object\"\n        }\n    },\n    \"type\": \"object\"\n}\n</code></pre> <p> Response 400 Bad Request </p> <p> Response 401 Unauthorized </p>"},{"location":"reference/API/#post-apiauthllt","title":"POST /api/auth/llt","text":"<p>Create long-lived token</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <p>Request body</p> application/json <p><pre><code>{\n    \"device\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"additionalProperties\": false,\n    \"properties\": {\n        \"device\": {\n            \"type\": \"string\",\n            \"writeOnly\": true\n        }\n    },\n    \"required\": [\n        \"device\"\n    ],\n    \"type\": \"object\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"longlived_token\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"longlived_token\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}\n</code></pre> <p> Response 401 Unauthorized </p>"},{"location":"reference/API/#delete-apiauthlltid","title":"DELETE /api/auth/llt/{id}","text":"<p>Delete long-lived token</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <code>id</code> path integer No Token ID to revoke <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"msg\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"msg\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}\n</code></pre> <p> Response 401 Unauthorized </p>"},{"location":"reference/API/#get-apiauthrefresh","title":"GET /api/auth/refresh","text":"<p>Token refresh</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerRefreshToken</code> header string N/A No JWT Bearer token <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"access_token\": \"string\",\n    \"refresh_token\": \"string\",\n    \"user\": {}\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\"\n        },\n        \"refresh_token\": {\n            \"type\": \"string\"\n        },\n        \"user\": {\n            \"type\": \"object\"\n        }\n    },\n    \"type\": \"object\"\n}\n</code></pre> <p> Response 401 Unauthorized </p>"},{"location":"reference/API/#post-apiauthsignup","title":"POST /api/auth/signup","text":"<p>User registration</p> <p>Request body</p> application/json <p><pre><code>{\n    \"device\": \"string\",\n    \"email\": \"string\",\n    \"name\": \"string\",\n    \"password\": \"string\",\n    \"username\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"additionalProperties\": false,\n    \"properties\": {\n        \"device\": {\n            \"type\": \"string\",\n            \"writeOnly\": true\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"writeOnly\": true\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"password\": {\n            \"type\": \"string\",\n            \"writeOnly\": true\n        },\n        \"username\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\n        \"email\",\n        \"name\",\n        \"password\",\n        \"username\"\n    ],\n    \"type\": \"object\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"access_token\": \"string\",\n    \"refresh_token\": \"string\",\n    \"user\": {}\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\"\n        },\n        \"refresh_token\": {\n            \"type\": \"string\"\n        },\n        \"user\": {\n            \"type\": \"object\"\n        }\n    },\n    \"type\": \"object\"\n}\n</code></pre> <p> Response 400 Bad Request </p>"},{"location":"reference/API/#schemas","title":"Schemas","text":""},{"location":"reference/API/#createlonglivedtoken","title":"CreateLongLivedToken","text":"Name Type <code>device</code> string"},{"location":"reference/API/#login","title":"Login","text":"Name Type <code>device</code> string <code>password</code> string <code>username</code> string"},{"location":"reference/API/#signup","title":"Signup","text":"Name Type <code>device</code> string <code>email</code> string <code>name</code> string <code>password</code> string <code>username</code> string"},{"location":"reference/API/#security-schemes","title":"Security schemes","text":"Name Type Scheme Description bearerAuth http bearer bearerRefreshToken http bearer"},{"location":"reference/API/#more-documentation","title":"More documentation","text":"<p>Find more info at the official documentation</p> For more information: https://docs.kitchenowl.org"},{"location":"reference/contributing/","title":"Contributing","text":"<p>Thanks for wanting to contribute to KitchenOwl!</p>"},{"location":"reference/contributing/#where-do-i-go-from-here","title":"Where do I go from here?","text":"<p>So you want to contribute to KitchenOwl? Great!</p> <p>If you have noticed a bug, please create an issue before starting any work on a pull request or get in contact by joining our Matrix space.</p>"},{"location":"reference/contributing/#fork-create-a-branch","title":"Fork &amp; create a branch","text":"<p>If there is something you want to fix or add, the first step is to fork the repository.  Frontend  Website</p> <p>Next is to create a new branch with an appropriate name. You can use the following format:</p> <pre><code>git checkout -b '&lt;type&gt;/&lt;description&gt;'\n</code></pre> <p>The <code>type</code> is the same as the <code>type</code> that you will use for your commit message.</p> <p>The <code>description</code> is a descriptive summary of the change the PR will make.</p>"},{"location":"reference/contributing/#general-rules","title":"General Rules","text":"<ul> <li>One PR per fix or feature</li> <li>All PRs should be rebased (with main) and commits squashed prior to the final merge process</li> </ul>"},{"location":"reference/contributing/#setup-install","title":"Setup &amp; Install","text":"FrontendBackendDocsWebsite <ul> <li>Install flutter</li> <li>Go to <code>./kitchenowl</code></li> <li>Install dependencies: <code>flutter packages get</code></li> <li>Create empty environment file: <code>touch .env</code></li> <li>Run app: <code>flutter run</code></li> </ul> <ul> <li>If you haven't already, switch to the backend folder <code>cd backend</code></li> <li>Install dependencies with <code>uv sync</code></li> <li>Install the pre-commit hooks <code>uv run pre-commit install</code></li> <li>Optionally: Activate your python environment <code>source .venv/bin/activate</code> (allows you to omit <code>uv run</code> in the following steps, environment can be deactivated with <code>deactivate</code>)</li> <li>Initialize/Upgrade requirements for the recipe scraper <code>uv run python -c \"import nltk; nltk.download('averaged_perceptron_tagger_eng', download_dir='.venv/nltk_data')\"</code></li> <li>Initialize/Upgrade the SQLite database with <code>uv run flask db upgrade</code></li> <li>Run debug server with <code>uv run wsgi.py</code></li> <li>The backend should be reachable at <code>localhost:5000</code></li> <li>For some simple interactions with the backend (like adding a user), you can use <code>uv run manage.py</code></li> </ul> <p>Danger</p> <p>Do not run the backend using <code>flask</code> as it won't initialize the sockets properly.</p> <p>Info</p> <p>When debugging the backend the following warning is shown:</p> <pre><code>WARNING in __init__: WebSocket transport not available. Install gevent-websocket for improved performance.\n</code></pre> <p>This only affects the backend when running in debug mode and can be ignored.</p> <ul> <li>Go to <code>./docs</code></li> <li>Create a python environment <code>python3 -m venv venv</code></li> <li>Activate your python environment <code>source venv/bin/activate</code> (environment can be deactivated with <code>deactivate</code>)</li> <li>Install dependencies <code>pip3 install -r requirements.txt</code></li> <li>Run docs: <code>mkdocs serve</code></li> </ul> <ul> <li>Install Hugo</li> <li>Clone the website repository</li> <li>Run website: <code>hugo server</code></li> </ul>"},{"location":"reference/contributing/#debugging","title":"Debugging","text":"<p>It is generally recommended opening the backend and the frontend projects in different VS Code instances. Here are some examples of configurations that work well with VS Code and allow you to set breakpoints:</p> FrontendBackend <p>An example configuration for <code>kitchenowl/.vscode/launch.json</code>:</p> <pre><code>{\n    \"configurations\": [\n        {\n            \"name\": \"kitchenowl\",\n            \"request\": \"launch\",\n            \"type\": \"dart\"\n        },\n        {\n            \"name\": \"kitchenowl (profile mode)\",\n            \"request\": \"launch\",\n            \"type\": \"dart\",\n            \"flutterMode\": \"profile\"\n        }\n    ]\n}\n</code></pre> <p>An example configuration for <code>backend/.vscode/launch.json</code>:</p> <pre><code>{\n    \"configurations\": [\n        {\n            \"name\": \"Python Debugger: KitchenOwl\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"wsgi.py\",\n            \"jinja\": true,\n            \"justMyCode\": true,\n            \"gevent\": true\n        }\n    ]\n}\n</code></pre> <p>To expose the backend to the complete network add the followig parameters:</p> <pre><code>args: [\n    \"--host=0.0.0.0\"\n]\n</code></pre> <p>If there is need to debug the interaction between two different app instances you can run flutter multiple times for different target devices. Either by running <code>flutter run -d &lt;DEVICE_ID&gt;</code> or by selecting <code>Run without Debugging</code> in VS Code multiple times. Be aware that it can be confusing to understand in which instance breakpoints are being hit when debugging multiple instances in VS Code.</p>"},{"location":"reference/contributing/#git-commit-message-style","title":"Git Commit Message Style","text":"<p>This project uses the conventional commits format.</p> <p>Example commit messages:</p> <pre><code>chore: update gqlgen dependency to v2.6.0\ndocs(README): add new contributing section\nfix: remove debug log statements\n</code></pre>"},{"location":"reference/management/","title":"Server Management","text":"<p>To make things easier there is a script that allows you to change settings on your server and manage users and households. Just run: <pre><code>docker exec -it BACKEND_CONTAINER_NAME python manage.py\n</code></pre> Which will prompt you for what you want to do: <pre><code>Manage KitchenOwl\n---\nWhat do you want to do?\n1.  Manage users\n2.  Manage households\n3.  Import files\n4.  Run all jobs\n(q) Exit\nYour selection (q):\n</code></pre> Follow the instructions and everything should be self-explanatory. Some things that you can do with this:</p> <ul> <li>Add/Update/Remove users </li> <li>Add users to households</li> <li>Run jobs like regenerating item orderings and suggestions</li> </ul>"},{"location":"self-hosting/","title":"Getting Started","text":"<p>There are multiple ways you can install the KitchenOwl server.</p>"},{"location":"self-hosting/#official-installation","title":"Official Installation","text":"<p>The official installation method is using Docker and docker-compose:</p> Docker composeDocker (All-in-one)Docker compose (All-in-one) <ol> <li>Download docker-compose.yml <pre><code>version: \"3\"\nservices:\n  front:\n    image: tombursch/kitchenowl-web:latest\n    restart: unless-stopped\n    # environment:\n    #   - BACK_URL=back:5000 # Change this if you rename the containers\n    ports:\n      - \"80:80\"\n    depends_on:\n      - back\n  back:\n    image: tombursch/kitchenowl-backend:latest\n    restart: unless-stopped\n    environment:\n      - JWT_SECRET_KEY=PLEASE_CHANGE_ME\n    volumes:\n      - kitchenowl_data:/data\n\nvolumes:\n  kitchenowl_data:\n</code></pre></li> <li>Change the default value for <code>JWT_SECRET_KEY</code></li> <li>If you want to use PostgreSQL, change the container names, or want to set other settings take a look at the advanced options</li> <li>Run <code>docker compose up -d</code></li> </ol> <ol> <li>Create a volume <code>docker volume create kitchenowl_data</code></li> <li>Run <code>docker run -d -p 8080:8080 -e \"JWT_SECRET_KEY=PLEASE_CHANGE_ME\" -v kitchenowl_data:/data tombursch/kitchenowl:latest</code></li> </ol> <ol> <li>Download docker-compose.yml <pre><code>version: \"3\"\nservices:\n  back:\n    image: tombursch/kitchenowl:latest\n    restart: unless-stopped\n    ports:\n      - \"80:8080\"\n    environment:\n      - JWT_SECRET_KEY=PLEASE_CHANGE_ME\n    volumes:\n      - kitchenowl_data:/data\n\nvolumes:\n  kitchenowl_data:\n</code></pre></li> <li>Change the default value for <code>JWT_SECRET_KEY</code></li> <li>If you want to use PostgreSQL, use separate containers for front and backend, or want to set other settings take a look at the advanced options</li> <li>Run <code>docker compose up -d</code></li> </ol> <p>Important</p> <p>We recommend running KitchenOwl behind a reverse proxy with HTTPS (e.g. nginx or Traefik). Some example configurations have been contributed.</p> <p>It is also important that you have HTTP Strict Transport Security enabled and the proper headers applied to your responses or you could be subject to a javascript hijack.</p> <p>Please see:</p> <ul> <li>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security</li> <li>https://www.netsparker.com/blog/web-security/http-security-headers/</li> </ul>"},{"location":"self-hosting/#updating-kitchenowl","title":"Updating KitchenOwl","text":"<p>To upgrade a docker compose stack, you can simply run:</p> <pre><code>docker compose pull\ndocker compose up -d\n</code></pre>"},{"location":"self-hosting/#community-installation-methods","title":"Community Installation Methods","text":"<p>Here is a list of community maintained install methods:</p> <ul> <li>Unraid (Source AGPL-3.0)</li> <li>Cosmos (Source AGPL-3.0)</li> <li>TrueNAS SCALE (Source BSD-3-Clause)</li> <li>NixOS (Source AGPL-3.0)</li> </ul>"},{"location":"self-hosting/advanced/","title":"Advanced Configuration","text":"<p>There are a few options for advanced users. Customization is done using environment variables.</p>"},{"location":"self-hosting/advanced/#tags","title":"Tags","text":"<p>There are three tags available: <code>latest</code>, <code>beta</code> and <code>dev</code>. <code>latest</code> is the most current stable release and is the default. <code>beta</code> corresponds to the most recent prerelease and might have some experimental features. The <code>dev</code> tag is directly build from the main branch and should not be used in production. Release notes can be found on the releases page. Additionally, the releases are tagged, so you can always choose a specific version with <code>vX.X.X</code>.</p>"},{"location":"self-hosting/advanced/#backend","title":"Backend","text":"<ul> <li>Set up with OpenID Connect: OIDC</li> <li>Set up with a PostgreSQL database: docker-compose.yml</li> </ul> <p>Environment variables for <code>tombursch/kitchenowl</code> and <code>tombursch/kitchenowl-backend</code>:</p> Variable Default Description <code>JWT_REFRESH_TOKEN_EXPIRES</code> <code>30</code> Sets how long (in days) refresh tokens are valid for. Essentially, how long it takes until users are automatically logged out. Must be a number. <code>JWT_SECRET_KEY</code> <code>JWT_SECRET_KEY_FILE</code> Reads the JWT secret from the specified file. Should be a path to a file (will override JWT_SECRET_KEY) <code>FRONT_URL</code> Adds allow origin CORS header for the URL. If set, should exactly match KitchenOwl's URL including the schema (e.g. <code>https://app.kitchenowl.org</code>) <code>PRIVACY_POLICY_URL</code> Allows to set a custom privacy policy for your server instance <code>TERMS_URL</code> Allows to set a custom terms and conditions URL for your server instance <code>DISABLE_USERNAME_PASSWORD_LOGIN</code> <code>false</code> If set, allows login only through OpenID Connect (OIDC). Be aware: this won't change the UI and automatically disables <code>OPEN_REGISTRATION</code> <code>DISABLE_ONBOARDING</code> <code>false</code> If set, disables the onboarding process (i.e. creating a user if none are present on the server). If set the first user has to manually be added <code>OPEN_REGISTRATION</code> <code>false</code> If set, allows anyone to create an account on your server <code>EMAIL_MANDATORY</code> <code>false</code> Makes the email a mandatory field when registering (Only relevant if <code>OPEN_REGISTRATION</code> is set) <code>COLLECT_METRICS</code> <code>false</code> Enables a Prometheus metrics endpoint at <code>/metrics/</code>. If enabled can be reached over the frontend container on port 9100 (e.g. <code>front:9100/metrics/</code>) <code>METRICS_USER</code> <code>kitchenowl</code> Metrics basic auth username <code>METRICS_PASSWORD</code> <code>ZqQtidgC5n3YXb</code> Metrics basic auth password <code>METRICS_PASSWORD_FILE</code> Allows setting METRICS_PASSWORD from a file path, will override METRICS_PASSWORD <code>SKIP_UPGRADE_DEFAULT_ITEMS</code> <code>false</code> On every restart all default items are imported and updated in every household <code>STORAGE_PATH</code> <code>/data</code> Images are stored in <code>STORAGE_PATH/upload</code> <code>DB_DRIVER</code> <code>sqlite</code> Supported: <code>sqlite</code> and <code>postgresql</code> <code>DB_HOST</code> <code>DB_PORT</code> <code>DB_NAME</code> <code>STORAGE_PATH/database.db</code> When the driver is <code>sqlite</code> this decides where to store the DB <code>DB_USER</code> <code>DB_USER_FILE</code> Allows setting DB_USER from a file path, will override DB_USER <code>DB_PASSWORD</code> <code>DB_PASSWORD_FILE</code> Allows setting DB_PASSWORD from a file path, will override DB_PASSWORD <code>SMTP_HOST</code> You can connect to an SMTP server for sending password resets and verifying user emails. This is not required. <code>SMTP_PORT</code> <code>465</code> <code>SMTP_USE_TLS</code> <code>false</code> Automatically changes to <code>true</code> if <code>SMTP_PORT</code> is <code>587</code> <code>SMTP_USER</code> <code>SMTP_USER_FILE</code> Allows setting SMTP_USER from a file path, will override SMTP_USER <code>SMTP_PASS</code> <code>SMTP_PASS_FILE</code> Allows setting SMTP_PASS from a file path, will override SMTP_PASS <code>SMTP_FROM</code> <code>SMTP_REPLY_TO</code> <code>OIDC_ISSUER</code> More about OIDC <code>OIDC_CLIENT_ID</code> <code>OIDC_CLIENT_SECRET</code> <code>OIDC_CLIENT_SECRET_FILE</code> Allows setting OIDC_CLIENT_SECRET from a file path, will override OIDC_CLIENT_SECRET <code>APPLE_CLIENT_ID</code> <code>APPLE_CLIENT_SECRET</code> <code>APPLE_CLIENT_SECRET_FILE</code> Allows setting APPLE_CLIENT_SECRET from a file path, will override APPLE_CLIENT_SECRET <code>GOOGLE_CLIENT_ID</code> <code>GOOGLE_CLIENT_SECRET</code> <code>GOOGLE_CLIENT_SECRET_FILE</code> Allows setting GOOGLE_CLIENT_SECRET from a file path, will override GOOGLE_CLIENT_SECRET <code>LLM_MODEL</code> Set a custom ingredient detection strategy for scraped recipes from the web. More at Ingredient Parsing <code>LLM_API_URL</code> <code>OPENAI_API_KEY</code>/<code>OPENROUTER_API_KEY</code>/etc. Depends on which provider you choose. See LiteLLM docs <code>BASE_HREF</code> Sets the subdirectory KitchenOwl is hosted at. Must begin and end with a slash <code>/</code>. Only applicable to <code>tombursch/kitchenowl</code> <p>Additionally, to setting these environment variables you can also override the start command to scale the backend up. Add the following line or take a look at this exemplary docker-compose.yml file:</p> <pre><code>back:\n  [...]\n  command: --ini wsgi.ini:web --gevent 2000 # default: 100\n  [...]\n</code></pre> <p>Overriding the command is not recommended as we might change the underlying process in the future.</p>"},{"location":"self-hosting/advanced/#frontend","title":"Frontend","text":"<p>Environment variables for <code>tombursch/kitchenowl-web</code>:</p> Variable Default Description <code>BACK_URL</code> <code>back:5000</code> Allows to set a custom address for the backend. Needs to be an uWSGI protocol endpoint. Should correspond to the name or IP of the backend container and port <code>5000</code> <code>BASE_HREF</code> Sets the subdirectory KitchenOwl is hosted at. Must begin and end with a slash <code>/</code>."},{"location":"self-hosting/advanced/#multiservice-setup","title":"Multiservice Setup","text":"<p>All provided examples can be turned into a multiservice setup with just a few changes. This means separating frontend and backend into multiple docker containers.</p> <p>See docker-compose.yml</p> <pre><code>version: \"3\"\nservices:\n  front:\n    image: tombursch/kitchenowl-web:latest\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n    depends_on:\n      - back\n  back:\n    image: tombursch/kitchenowl-backend:latest\n    restart: unless-stopped\n    environment:\n      - JWT_SECRET_KEY=PLEASE_CHANGE_ME\n    volumes:\n      - kitchenowl_data:/data\n\nvolumes:\n  kitchenowl_data:\n</code></pre>"},{"location":"self-hosting/ingredient_parsing/","title":"Ingredient Detection","text":"<p>When scraping recipes from the web multiple strategies to map ingredients to household items are available. The scraping only returns a list of ingredients (like <code>3 cloves garlic</code>, <code>1/2 teaspoon salt</code>, <code>2 carrots chopped</code>) from which we need to extract the ingredient name and description. The names are then mapped to existing household items.</p> <p>The default method is to use a local natural language processing (NLP) model trained on English ingredients. To use this leave the <code>LLM_MODEL</code> environment variable empty.</p> <p>Alternatively, you can use a Large Language Model (LLM), multiple models are supported. Using an LLM uses more resources but can provide better results, especially for languages other than English. It can automatically translate the ingredient names to the household language for better item detection.</p>"},{"location":"self-hosting/ingredient_parsing/#openai","title":"OpenAI","text":"<p>To use OpenAI you need to set the following environment variables:</p> <ul> <li><code>LLM_MODEL</code>: The model name (e.g. <code>gpt-3.5-turbo</code>)</li> <li><code>OPENAI_API_KEY</code>: Your OpenAI API key</li> </ul>"},{"location":"self-hosting/ingredient_parsing/#ollama","title":"Ollama","text":"<p>Ollama is a locally hosted LLM. You can also run this on a remote host (e.g. your desktop), and when the host is not reachable it will fall back to the NLP method.  To use Ollama you need to set the following environment variables:</p> <ul> <li><code>LLM_MODEL</code>: The model name prefixed with <code>ollama</code> (e.g. <code>ollama/llama3.1</code>)</li> <li><code>LLM_API_URL</code>: The URL of the Ollama server (e.g. <code>http://localhost:11434</code>)</li> </ul>"},{"location":"self-hosting/ingredient_parsing/#openrouter","title":"OpenRouter","text":"<p>To use OpenRouter you need to set the following environment variables:</p> <ul> <li><code>LLM_MODEL</code>: The model name prefixed with <code>openrouter</code> (e.g. <code>openrouter/mistralai/mistral-large</code>)</li> <li><code>LLM_API_URL</code>: <code>https://openrouter.ai/api/v1</code></li> <li><code>OPENROUTER_API_KEY</code>: Your OpenRouter API key</li> </ul>"},{"location":"self-hosting/migration/","title":"Migrating from Older Versions","text":""},{"location":"self-hosting/migration/#v0616","title":"v0.6.16","text":"<p>For OIDC users the redirect URI has changed from <code>kitchenowl:///signin/redirect</code> to <code>kitchenowl:/signin/redirect</code> (See #644 for the reason why).</p>"},{"location":"self-hosting/migration/#v050","title":"v0.5.0","text":"<p>The frontend is not required any more <code>tombursch/kitchenowl:latest</code> is now an all-in-one container that hosts the web application and backend. Take a look at the installation instructions if you want to switch your setup. Existing setups don't need to be adapted, they will still work like they used to. Although, there now exists a docker image <code>tombursch/kitchenowl-backend:latest</code> specifically designed for the split setup.</p>"},{"location":"self-hosting/migration/#v049","title":"v0.4.9","text":"<p>The frontend is now required and using the option to use the backend as an HTTP server has been removed. </p>"},{"location":"self-hosting/migration/#v033","title":"v0.3.3","text":"<p>Starting from version 0.3.3 <code>tombursch/kitchenowl-web:latest</code> ignores the <code>front_url</code> environment variable and in most cases is not needed in <code>tombursch/kitchenowl:latest</code>.</p>"},{"location":"self-hosting/migration/#v0033","title":"v0.0.33","text":"<p>Starting from version 0.0.33 the frontend routes requests to the backend. Thus, only one port has to be accessible. However, the backend can be hosted in standalone mode as it was before (see legacy server install).</p>"},{"location":"self-hosting/oidc/","title":"OpenID Connect","text":"<p>OIDC allow users to sign in with social logins or third party issuer. KitchenOwl supports three providers: Google, Apple (only on iOS &amp; macOS), and a custom one.</p> <p>For self-hosted instances the custom provider is the most interesting one.</p>"},{"location":"self-hosting/oidc/#setup","title":"Setup","text":"<p>Inside your OIDC you need to configure a new client, with the following to redirect URIs:</p> <ul> <li><code>FRONT_URL(1)/signin/redirect</code> </li> <li><code>kitchenowl:/signin/redirect</code></li> </ul> <ol> <li>FRONT_URL is the environment variable that exactly matches KitchenOwl's URL including the schema (e.g. <code>https://app.kitchenowl.org</code>)</li> </ol> <p>KitchenOwl uses the token auth method <code>client_secret_post</code> and will request the following scopes: </p> <ul> <li><code>openid</code></li> <li><code>profile</code></li> <li><code>email</code></li> </ul> <p>You can then configure the backend using environment variables, just provide your issuer URL, client ID, and client secret:</p> <pre><code>back:\n    environment:\n        - [...]\n        - FRONT_URL=&lt;URL&gt; # front_url is requred when using oidc\n        - OIDC_ISSUER=&lt;URL&gt; # e.g https://accounts.google.com\n        - OIDC_CLIENT_ID=&lt;ID&gt;\n        - OIDC_CLIENT_SECRET=&lt;SECRET&gt;\n</code></pre> <p>If everything is set up correctly you should see a sign in with OIDC button at the bottom of the login page.</p> <p></p>"},{"location":"self-hosting/oidc/#linking-accounts","title":"Linking accounts","text":"<p>When signing in using OIDC you're either logged into the linked account or, if none is present, a new account is created. The account creation will fail if an email already associated with a KitchenOwl account is provided by the identity management.</p> <p>If you've already started using KitchenOwl or created an account first you can link an OIDC account to your existing KitchenOwl account. Just go to settings  Click on your profile at the top  Linked Accounts  and link your account.</p> <p>Account links are permanent and can only be removed by deleting the KitchenOwl account. Users that signed in using OIDC are normal users that, after setting a password, can also sing in using their username + password. Deleting a user from your OIDC authority will not delete a user from KitchenOwl.</p>"},{"location":"self-hosting/oidc/#alternate-mobile-redirect-uri-for-oidc-providers","title":"Alternate mobile redirect URI for OIDC providers","text":"<p>The mobile redirect URL follows RFC compliance. Some OIDC providers request a standard URL format, you may change the behaviour by switching off RFC compliance using the the backend environment variable </p> <pre><code>back:\n    environment:\n        - [...]\n        - OIDC_RFC_COMPLIANT_REDIRECT=False # default: True\n</code></pre> <p>which will result in an alternative mobile redirect URI for mobiles:</p> <ul> <li><code>kitchenowl:///signin/redirect</code></li> </ul>"},{"location":"self-hosting/oidc/#limitations","title":"Limitations","text":"<p>Currently only Web, Android, iOS, and macOS are supported.</p>"},{"location":"self-hosting/oidc/#apple-google","title":"Apple &amp; Google","text":"<p>These two providers will allow anyone to sing in with an Apple or Google account. They can be configured similarly to custom providers but will show up with a branded sign in with button. It is not recommended setting up social logins for self-hosted versions as they might not work correctly. <pre><code>back:\n    environment:\n        - [...]\n        - FRONT_URL=&lt;URL&gt; # front_url is requred when using oidc\n        - APPLE_CLIENT_ID=&lt;ID&gt;\n        - APPLE_CLIENT_SECRET=&lt;SECRET&gt;\n        - GOOGLE_CLIENT_ID=&lt;ID&gt;\n        - GOOGLE_CLIENT_SECRET=&lt;SECRET&gt;\n</code></pre></p>"},{"location":"self-hosting/oidc/#example-authelia","title":"Example: Authelia","text":"<p>Authelia is an open-source authentication and authorization server and portal fulfilling the identity and access management (IAM) role of information security in providing multi-factor authentication and single sign-on (SSO) for your applications via a web portal. It acts as a companion for common reverse proxies.</p> <p>Place this in your Authelia configuration.yaml to allow KitchenOwl to use Authelia as an OIDC provider.</p> <pre><code>- id: kitchenowl\n    description: KitchenOwl\n    secret: # Same as OIDC_CLIENT_SECRET\n    public: false\n    authorization_policy: two_factor # Can also be one_factor if you need less security\n    pre_configured_consent_duration: 1M # One month - change this to something you desire\n    audience: []\n    scopes:\n        - openid\n        - email\n        - profile\n    redirect_uris:\n        - https://your.domain.here/signin/redirect # Put the same value as FRONT_URL, appended with /signin/redirect\n        - kitchenowl:/signin/redirect\n    response_modes:\n    userinfo_signing_algorithm: none\n    token_endpoint_auth_method: client_secret_post\n</code></pre>"},{"location":"self-hosting/reverse-proxy/","title":"Reverse proxy configurations","text":"<p>These are community provided and might need to be adapted to your specific setup.</p>"},{"location":"self-hosting/reverse-proxy/#haproxy","title":"HAProxy","text":"<p>Assumes HAProxy is part of your KitchenOwl docker compose stack, and you use the multiservice setup method.</p> <pre><code>global\n  log stdout local0\n\ndefaults\n  mode http\n  log global\n  option httplog\n  option forwardfor if-none\n  retries                 3\n  timeout http-request    10s\n  timeout queue           1m\n  timeout connect         10s\n  timeout client          1m\n  timeout server          1m\n  timeout http-keep-alive 10s\n  timeout check           10s\n  default-server init-addr last,libc,none\n\nresolvers docker\n  parse-resolv-conf\n\n#-----------------------#\n#  http\n#-----------------------#\nfrontend efeu-http\n  bind :::80 v4v6\n  bind :::443 v4v6 ssl crt /etc/letsencrypt/live/domain/domain.pem\n\n  redirect scheme https if !{ ssl_fc }\n\n  # hsts max-age is mandatory\n  # 16000000 seconds is a bit more than 6 months\n  http-response set-header Strict-Transport-Security \"max-age=16000000; includeSubDomains; preload;\"\n\n  default_backend kitchenowl\n\nbackend kitchenowl\n  server kitchenowl front:80 resolvers docker\n</code></pre>"},{"location":"self-hosting/reverse-proxy/#traefik-v2","title":"Traefik v2","text":"<p>This example configuration assumes that you are:</p> <ul> <li>Running Traefik on the <code>web</code> docker network</li> <li>Use the entrypoint <code>websecure</code> for HTTPS and have configured it for a wildcard SSL certificate</li> <li>Have a security@docker middleware (see below)</li> </ul> <pre><code>version: \"3\"\n\nservices:\n  front:\n    image: tombursch/kitchenowl-web:latest\n    networks:\n      - default\n      - web\n    restart: unless-stopped\n    depends_on:\n      - back\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.docker.network=web\"\n      - \"traefik.http.routers.kitchenowl.rule=Host(`your.domain.here`)\"\n      - \"traefik.http.routers.kitchenowl.entrypoints=websecure\"\n      - \"traefik.http.routers.kitchenowl.middlewares=security@docker\" # Use to apply security middlewares\n\n  back:\n    image: tombursch/kitchenowl:latest\n    networks:\n      - default\n    restart: unless-stopped\n    environment:\n      - FRONT_URL=https://your.domain.here\n      - JWT_SECRET_KEY=PLEASE_CHANGE_ME\n    volumes:\n      - kitchenowl_data:/data\n\nnetworks:\n  web:\n    external: true\n\nvolumes:\n  kitchenowl_data:\n</code></pre> <p>Traefik can add extra security headers to add a level of protection to your KitchenOwl instance. You can specify a middleware in your Traefik docker-compose.yml using labels.</p> <pre><code>labels:\n  - \"traefik.http.middlewares.security.headers.addvaryheader=true\"\n  - \"traefik.http.middlewares.security.headers.sslredirect=true\"\n  - \"traefik.http.middlewares.security.headers.browserxssfilter=true\"\n  - \"traefik.http.middlewares.security.headers.contenttypenosniff=true\"\n  - \"traefik.http.middlewares.security.headers.forcestsheader=true\"\n  - \"traefik.http.middlewares.security.headers.stsincludesubdomains=true\"\n  - \"traefik.http.middlewares.security.headers.stspreload=true\"\n  - \"traefik.http.middlewares.security.headers.stsseconds=63072000\"\n  - \"traefik.http.middlewares.security.headers.customframeoptionsvalue=SAMEORIGIN\"\n  - \"traefik.http.middlewares.security.headers.referrerpolicy=same-origin\"\n</code></pre>"},{"location":"self-hosting/reverse-proxy/#apache","title":"Apache","text":"<p>The following assumptions are made by this config:</p> <ul> <li>You have a (sub)domain for your kitchenowl instance. eg: kitchenowl.example.org</li> <li>You are running the docker images from the given docker-compose.yml with the \"ports\" changed from \"80:80\" to \"8080:80\"</li> <li>You have certbot (or some other letsencrypt client) installed and running on your host system</li> <li>You have apache running on your host with the default ports for http/https (80/443)</li> </ul> <pre><code>&lt;VirtualHost *:80&gt;\n        ServerName kitchenowl.example.org\n        ServerAdmin webmaster@example.org\n\n        ErrorLog ${APACHE_LOG_DIR}/kitchenowl_error.log\n        CustomLog ${APACHE_LOG_DIR}/kitchenowl_access.log combined\n\n        Redirect permanent / https://kitchenowl.example.org\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n        ServerName kitchenowl.example.org\n        ServerAdmin webmaster@example.org\n\n        &lt;IfModule mod_headers.c&gt;\n                Header always set Strict-Transport-Security \"max-age=15552000; includeSubDomains; preload\"\n        &lt;/IfModule&gt;\n\n\n        ErrorLog ${APACHE_LOG_DIR}/kitchenowl_error.log\n        CustomLog ${APACHE_LOG_DIR}/kitchenowl_access.log combined\n\n        ProxyPass / http://localhost:8080/\n        ProxyPassReverse / http://localhost:8080/\n\nSSLCertificateFile /etc/letsencrypt/live/kitchenowl.exaample.org/fullchain.pem\nSSLCertificateKeyFile /etc/letsencrypt/live/kitchenowl.example.org/privkey.pem\nInclude /etc/letsencrypt/options-ssl-apache.conf\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"self-hosting/reverse-proxy/#nginx","title":"Nginx","text":"<p>The following assumptions are made by this config:</p> <ul> <li>You have a (sub)domain for your kitchenowl instance. eg: kitchenowl.example.org</li> <li>You are running the docker images from the given docker-compose.yml with the \"ports\" changed from \"80:80\" to \"8080:80\"</li> <li>You have certbot (or some other letsencrypt client) installed and running on your host system</li> <li>You have nginx running on your host with the default ports for http/https (80/443)</li> </ul> <pre><code>server {\n    server_name kitchenowl.example.org;\n    listen [::]:443 ssl ipv6only=on; # managed by Certbot\n    listen 443 ssl; # managed by Certbot\n\n    # https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    location / {\n        proxy_pass http://localhost:8080;\n    }\n\n    ssl_certificate /etc/letsencrypt/live/kitchenowl.example.org/fullchain.pem; # managed by\n Certbot\n    ssl_certificate_key /etc/letsencrypt/live/kitchenowl.example.org/privkey.pem; # managed \nby Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n}\nserver {\n    if ($host = kitchenowl.example.org) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n\n    server_name kitchenowl.example.org;\n    listen 80;\n    listen [::]:80;\n    return 404; # managed by Certbot\n}\n</code></pre>"},{"location":"self-hosting/reverse-proxy/#caddy","title":"Caddy","text":"<p>Caddy will automatically set up an SSL certificate for the specified hostname.</p> <pre><code>kitchenowl.example.org {\n        reverse_proxy localhost:8080 # Set the address of your KitchenOwl frontend here\n        encode gzip\n        header {\n                X-Frame-Options \"SAMEORIGIN\"\n                X-XSS-Protection \"1; mode=block\"\n                X-Content-Type-Options \"nosniff\"\n                Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n                Referrer-Policy \"strict-origin-when-cross-origin\"\n        }\n}\n</code></pre>"}]}